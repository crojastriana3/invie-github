Por que git y githud: control de versiones. Noa ayuda a llevar los estados de nuestros proyecto.
Conjunto de comandos que realiza cosas especificadas.

----QUE ES UN SISTEMA DE CONTROL DE VERSIONES: Registra los cambios realizados sobre un archivo o conjunto de archivos a lo largo del tiempo.
----Cuando hacemos algo en word, por ejemplo al dar control z nos devolvemos a el estado anterior del archivo.

Realizaremos una web mientras usamos git.
----CLASIFICACIÓN
--Local: Que vive en nuestra laptop.
--Centralizado: Lo hace más grande, por que se guarda en el 	server. O sea hay se almacena el proyecto permitiendo 	distibuirlo para multiples dispositivos.
--Distribuidos: Git es distribuido, entonces cada usuario que 	participe en el proyecto, tiene una copia del proyecto que 	realiza, por eso no dependemos de un solo computador que 	almacena la info.
------------------ GIT ---------------------------
Open source linux, se asocio con Beatkeeper. y cuando se rompen las relaciones, linux crea su propio sistema distribuidos de control de versiones. Haciendolo veloz, senscillo, completamente distribuido.
Desarrollo no lienal:  podemos abrir cosas cuando queramos aparte delproyecto principal.
Git al igual alamacena una referencia de los archivos que no se han cambiado.
Cualquier trabajo es local. Entonces puedes trabajar y luego subirlo apenas tengas internet. comits.
Integridad: no se pierde la info sin que lo detecte.

---------------LOS 3 ESTADOS DE GIT--------------------
Working Directory:Inicalmente entra aquí.
Staging Area: pasa por el área de preparación donde se inical el 
	proyecto.
Git Repository:commint se guarda
------------Que es GitHub----------------------
Pueden trabajar en conjunto pero tambien separado.
Git: el oftware de versionamiento.
GitHub es la plataforma host para alamacenar los cambios en la red.
Y además funciona como una red social. 

Para intalar en WINDOWS, seguir los pases y listo

Linux: Si eres usuario de linux usar la consola debe ser algo con lo que te topas en tu día a día, otra ventaja es que en muchos sistemas de codigo abierto ya tiene git pre-instalado así que probemos eso primero.
ve a tu terminal y escribe git --version si te muestra la versión de git todo está perfecto y puedes continuar con las clases si no es tu caso instálalo según tu distribución desde la terminal corriendo los siguientes comandos.
En Ubuntu o distribuciones derivadas

sudo apt-get install git

------------- COMANDOS ÚTILES EN LA TERMINASL GIT BASH -----------------
Tenemos que aprender algunos comandos sencillos, para trabajar con Git.

    El primero es cd que nos permite movernos dentro de carpetas. Con cd … podemos salir de las carpetas.
    Para crear carpetas vamos a usar mkdir y ponemos el nombre de la carpeta que vamos a crear.
    Con el comando ls vamos a ver las carpetas que tenemos creadas.
    Para limpiar la terminal vamos a usar el comando clear. Este nos sirve para hacer scroll e ir al principio de la terminal.
    El comando touch nos permite crear archivos.
    Para borrar archivos vamos a usar el comando rm y el nombre del archivo.
    De la misma forma para borrar carpetas usamos rm -rf y el nombre de la carpeta.
    Otra herramienta que vamos a usar dentro de Git para editar archivos con el editor que tengamos en nuestra máquina pero dentro de la terminal.
    Con el comando _:wq _vamos a guardar los cambios que hicimos dentro del archivo que habíamos creado.

PARA ENTRAR EN WINDOWS EN UNA CARPETA, DEBEMOS INGRESAR CARPETA A CARPETA  CD
HASTA LLEGAR A LA DESTINO
/d/Alejo/CursosYLenguajes/GitHub
 PARA SALIR cd ..
 ls vemos las carpetas.
 touch crear archivo.
 rm file.txt borrar rchivos
 rm -rf repositorio2 borrar carpeta
 editar archivos : vim archivo.txt
---PARA GUARDAR LO QUE EDITE ----
escape + :  y guardar wq con esto lo guardamos.
sin guardar solo q  .

---------COMANDOS GIT -------------------------
git init : creando repositorio. o iniciar
(MASTER) ES UNA RAMA: quiere decir que esta en el repositorio.
AHÍ YA PODEMOS CREAR ARCHIVOS
--CARPETA OCULTA : ES DONDE VIVE, SI NOS DESACEMOS SE DESAPARECE EL REPO.
-- Borrar repositorio : rm -rf .git

----------GIT ADD ----------------------------------------------
Agregado, quitar y viendo el estatud de los archivos.

Creamos un archivo nuevo y para agregarlo.
git status: miramos el estado del archivo si esta en rojo
es por que esta en nuestro working directory y con 
git add agregamos a git los archivos.

YA EN VERDE FALTA AGREGARLO A COMMIT
si lo quiero borrar 
git rm --cached file

---- git add -A agrega todo lo que esta para ser agregado.
para quitarlos tambien
----- git rm -f archivos, se borra de todo lugar

..--- git add -n archivo: no hace la agregación o sea, miramos lo que en realidad esta 

Aqui estamos en Staging
---------- git commit ------------------
CONFIRMAMOS CAMBIOS
Pasamos a nustro repositorio git los archivos.
got commit -m "Inicializar nuestro landing" 
lo que hicimos fue agregar todo a el repository(3er estado git)

Como hago cuando realice un commit sin todo
entonces
git commit -m 'concateno cambios' -amend =lo que hace es concatener con el cambio previo.
O SOLO git commit --amend

git log : ver los commit

---------------- git tag ---------------
Etiquetando confirmaciones.
Son ligeras o anotadas: Ligeras se crean con el nombre de la etiqueta, las anotaciones son las que llevan un mensaje usando -m podemos dejar mensaje.
Si queremos borrarlas -d, si las queremos listar usamos  -l
y si las queremos renombrar -f 
Utilizamos Sha-1 podemos crear etiquetas anotadas haciendo referencia a commit viejos.
git tag -a 0.5 -m 'Versión estable del proyecto'
// así etiquetamos el ultimo commit.
// y así agregamos de pasados 
git tag 0.3 f944a1212962e1bc1d86f3dda37469663bf1337d
// Y PARA VERLO
 git tag -l
// borrar etiqueta
git tag -d 1.0
// renombrar
git tag -f -a 0.1 -m 'Iniciando proyecto' 218e960adc15622a75b78099ff53da5e7b68ff8a
// luego se puede borrar la versión que no estaba bien.

----------------git log ..........
Revisa las historias de nuestro proyecto
logs muestra los códigos hexadecimales que crea el Sha-1, el auto y fecha del commit.

-- git log --oneline : pones los commits más reducidos. Lo cual                        al tener muchos es mejor verlos así.
--git log --oneline --graph: los graficos de los commits.

--git log -'Numero de omits?: los comits que quiero ver. La 			cantidad que quiera.

-------------------- git diff ------------------------------
Revisa los cambios entre las versiones.
Los cambios que hay entre commits se usan los Sha-1 para ver la comparación.
///
git diff 218e960 PONEOS EL Sha-1 y vemos los cambios que hay, de ese commit al final en el que estamos.

/// Así comparamos con otro commit

git diff "Sha-1" "Sha-1" 
 -- En rojo aparece al comparar con la que no nuevo con el anterios y en verde, el que anterior (que no tenia) con el nuevo (que tien).
-- git diff [version 1] vs [version 2] 

--------------------- git reset --soft -----------------------
Con este comando, podemos borrar commits que no debimos guardar, pero mantiene los cambios.
Pero debemos tener cuidado de no borrar otros.
--soft [Sha-1]: nos permite identidicar el commit que queremos resetear. 
Entonces se pone desde el sha anterios al que quiero quitar. 
Los archivos no los cambia.
O  reescribir en el commit
--mixed: 
--hard: 

------gir reset --mixed --------
Se usa para hacer cambios en commits que pudieran tener errores.
Descarta cambios pero no deja los archivos en stache.
nos dice que hacer
Cambia 
------------git reset --hard -----------
este si borra absolutamente todo 
Si estan en el workin directory no los borra, por que no estan todabia en git.
con commits:  git reset -hard Sha-1
para recuperar los datos si borre todo, se usa 
el ultimo sha-1,por eso si borro algo debo tener dos ventanas, para tener los sha1 en otro lado por si se nos borra todo.
git reset -hard sha1 ultimo 
git log

-------------------------- otro editor de texto-----------------
Como configuro cualquier editor de texto, parausar git.

git config --global core.editor vim : se abre la configuración 
otro editor
git config --global core.editor "atom --wait" (o el editor de código que quiera)

----------- git branch (multiples variables del repo)-----------
Con esto, podemos usar más ramas en el projecto.
(Master) es la rama principal, con ella inicia el proyecto git.
cuando necesito puedo crear otras ramas, para trabajar con un equipo.
Pero lo mejor es trabajar en una rama aparte, por si hago un bug, en la principal todo seguiria bien.
git branch nombre
para verlas
git branch -l
borrar
git branch -d nombre
si tiene commit borrar
git branch -D nombre
renombrar rama
git branch -m nombre nuevoNombre

------git checkout (Moviendonos entre ramas y versiones)--------
Con este comando, nos movemos en el tiempo sin borrar nada, este comando ayuda a cazar bugs o verificar el estado de nuestro proyecto en determinado momento. Moviendonos sha a sha o bueno, comit a comit.
Y tambien podemos crear ramas e ingresar a ella directamente:
git checkout -b
Movernos en el tiempo con los commit a travez de los Sha-1
git checkout 'sha-1'

Si econtramos un bug, tenemos qye crear una para solucionar el bug pero desde el master  y no en la rama del bug.

--------Trabajando entre ramas------------------
 si ocurre un error podemos ir rama a rama buscando el bug.

si no agregamos algo en una rama, ello se mueven a otra rama esperando el commit.

Ya puedo ir trabajando poco a poco versión a versión


------------ git merge (mezclando entre ramas)--------------------
REFLEJAR LAS RAMAS EN NUESTRA RAMA MASTER.
git merge 'nombre rama a mezclar'



aparece como un Fast-forward al realizarce la mezcla por que es la manera más facil al ser el primero 
para mezclar:
git merge nombreRama a maezclar 
si sale fast-forward quiere decir que mezclamos cosas directamente con la master

7
Si vas despues:
sera recursivo, debemos agregar cada cambio y luego hacer un commit y listo, si no hay conflicto con archivos todo saldra bien un commit m´ás y ya



Saldra luego todo y realiza el commit que pide realizar cambios.

merge con conflictos: git merge nuva-imagen
 y ya decido con que quedarme.

-------------- git rebase-. -----------------
Rescribe la histpria del proyecto
es otra manera de hacer mezclas de las ramás en el proyecto

CON ESTE SOLO HACEMOS UN COMMIT Y NO AGREGAMOS MÁS CON ESTE SOLO TENEMOS UNA LINEA DE TIEMPO CON LOS LOG.

//creamos rama a mezclar con rebase
git checkout -b updateA
touch updateA
git add -A
git commit 

// volvemos al master
git checkout master
creamos las ramas que necesiremos 

y para agregarlas o bueno mezclarlas 
// con este vemos que se agrega en curcas
git merge updateA 

// con este no gay curva
git rebase updateB


// vemos los cambios
git log --oneline --graph


Con esto vemos como se agregan las cosas y se ve lineal.


git reset --hard commit
// la mezclamos interactivamente
git rebase -i updateA
y en nuesto eidtor veremos las opciones.


-------git stash-------------------
GUARDANDO CAMBIOS TEMPORALMENTE

Si no estamos lisos para confirmar el cambio, Stash nos permite mantener un estado intermedio antes de fenerar un commit. CAMBIOS SIN CONFIRMAR.

Entonces guardo sin hacer commit, guardamos el estado

git stash 

Si ingreso a otra rama

git checkout hotfix

puedo entrar sin problema por que tenfo un estado guardado y puedo regresar a la otra rama
y restablesco el estado a la rama.

git stash list

con ese comando vere los cambios 
Y los podemos eliminar tambien

git stash drop stash@{0}

y si lo borre listo no pasa nada 

si creo un archivo 

touch cambio2

debo agregarlo a git para poder entrar en stash

git add cambio2

Ahora si lo puedo stashear

git stash

git list

Ahora lo agregamos A COMMIT

(( con este aplicamos el ultimo cambio
git stash apply

// varios stash y con el a volvemos 

git stash apply stash@{0}  

--------------Cherry pick eligiendo commits selectivamente---------------
Si estás trabajando en una rama, pero de repente notas que hiciste un cambio en la rama que no debías, para esto podemos usar cherry pick. Este comando nos puede salvar la vida, ya que nos permite sacar cambios específicos de una rama y mezclarlos en otra.





